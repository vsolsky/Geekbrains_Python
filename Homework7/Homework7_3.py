# 3. Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число). В классе должны
# быть реализованы методы перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение
# (__mul__()), деление (__truediv__()). Данные методы должны применяться только к клеткам и выполнять увеличение,
# уменьшение, умножение и целочисленное (с округлением до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток
# больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества
# ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества
# ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному
# аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order()
# вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order()
# вернет строку: *****\n*****\n*****.

class Cell:
    def __init__(self, num_nucleus=5):
        self.num_nucleus=num_nucleus
    def __add__(self, other):
        return self.num_nucleus+other.num_nucleus
    def __sub__(self, other):
        if self.num_nucleus-other.num_nucleus>0:
            return self.num_nucleus-other.num_nucleus
        else:
            return "The first cell is lower than the second, subtraction is not possible"
    def __mul__(self, other):
        return self.num_nucleus*other.num_nucleus
    def __floordiv__(self, other):
        return self.num_nucleus // other.num_nucleus
    def make_order(self):
        for el in range(1,self.num_nucleus+1):
            print("*", end='')
            if el%5==0:
                print("\n")

cell1=Cell(12)
cell2=Cell(10)
sum_cells=cell1+cell2
print(f"Sum of cells: {sum_cells}")
subtract_cells=cell1-cell2
print(f"Subtraction of cells: {subtract_cells}")
multipl_cells=cell1*cell2
print(f"Multiplication of cells: {multipl_cells}")
division_cells=cell1//cell2
print(f"Cell1 divided by cell2 is: {division_cells}")
cell1.make_order()


